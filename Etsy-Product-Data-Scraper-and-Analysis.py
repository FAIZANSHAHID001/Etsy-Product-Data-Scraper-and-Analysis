# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RmqluWZFbfvUsBnqe8xo-CPWqRuqZ3bg

Installing all the libraries
"""

from bs4 import BeautifulSoup
import requests
import time
import datetime
import csv

"""Creating User Agent"""

base_url = 'https://www.etsy.com/search?q=caps&ref=search_bar'
page_number = 1

headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
    "Accept-Encoding": "gzip, deflate",
    "Accept-Language": "en-US,en;q=0.9",
    "Upgrade-Insecure-Requests": "1"
}

"""Create a CSV file and write header row"""



with open('etsy_products.csv', mode='w', newline='', encoding='utf-8') as csv_file:
    fieldnames = ['Product Title', 'Rating', 'Number of Reviews', 'Price']
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

    writer.writeheader()

    while True:
        URL = f'{base_url}&ref=pagination&page={page_number}'  # Corrected the URL
        page = requests.get(URL, headers=headers)
        soup = BeautifulSoup(page.content, "html.parser")

        product_cards = soup.find_all("div", class_="v2-listing-card")



        # Find all the product title elements
        product_titles = soup.find_all("h3", class_="wt-text-caption v2-listing-card__title wt-text-truncate")

        # Find all the rating input elements
        ratings = soup.find_all("input", {"name": "rating", "type": "hidden"})

        # Find all the number of reviews elements
        num_reviews = soup.find_all("span", class_="wt-text-caption wt-text-gray wt-display-inline-block wt-nudge-l-3 wt-pr-xs-1")

        # Find all the price elements
        prices = soup.find_all("span", class_="currency-value")


        for i in range(len(product_titles)):
            title = product_titles[i].get_text()

            # Check if there are enough elements in the ratings list
            if i < len(ratings):
                rating = ratings[i]["value"]
            else:
                rating = "N/A"  # Handle the case when data is missing

            # Check if there are enough elements in the num_reviews list
            if i < len(num_reviews):
                reviews = num_reviews[i].get_text()
            else:
                reviews = "N/A"

            # Check if there are enough elements in the prices list
            if i < len(prices):
                price = prices[i].get_text()
            else:
                price = "N/A"

            # Write the data to the CSV file
            writer.writerow({'Product Title': title, 'Rating': rating, 'Number of Reviews': reviews, 'Price': price})

        next_button = soup.find("a", class_="wt-btn wt-btn--filled wt-action-group__item wt-btn--small")
        if not next_button:
            break  # If no "Next" button is found, exit the loop

        # Increment the page number for the next iteration
        page_number += 1

print("CSV file 'etsy_products.csv' has been created on your desktop.")

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("etsy_products.csv")

df.head()

df.nunique()

df.describe()

# Convert 'Rating' and 'Number of Reviews' columns to strings
df['Rating'] = df['Rating'].astype(str)
df['Number of Reviews'] = df['Number of Reviews'].astype(str)

# Check for rows with non-numeric values in 'Rating'
non_numeric_rating = df[~df['Rating'].str.replace('.', '', 1).str.isnumeric()]
print(non_numeric_rating)

# Check for rows with non-numeric values in 'Number of Reviews'
non_numeric_reviews = df[~df['Number of Reviews'].str.replace(',', '', 1).str.isnumeric()]
print(non_numeric_reviews)

df.isnull().sum()

sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap='viridis')
plt.show()

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 10))

sns.histplot(df['Rating'], ax=axes[0, 0], kde=True)
axes[0, 0].set_title('Distribution of Ratings')
axes[0, 0].set_xlabel('Rating')
axes[0, 0].set_ylabel('Frequency')

sns.histplot(df['Number of Reviews'], ax=axes[0, 1], kde=True)
axes[0, 1].set_title('Distribution of Number of Reviews')
axes[0, 1].set_xlabel('Number of Reviews')
axes[0, 1].set_ylabel('Frequency')

sns.histplot(df['Price'], ax=axes[1, 0], kde=True)
axes[1, 0].set_title('Distribution of Prices')
axes[1, 0].set_xlabel('Price')
axes[1, 0].set_ylabel('Frequency')

sns.scatterplot(x='Number of Reviews', y='Rating', data=df, ax=axes[1, 1])
axes[1, 1].set_title('Number of Reviews vs. Rating')
axes[1, 1].set_xlabel('Number of Reviews')
axes[1, 1].set_ylabel('Rating')

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Create a bar chart for Price
plt.figure(figsize=(10, 5))
plt.bar(df['Price'], df['Rating'], color='skyblue', alpha=0.7)
plt.xlabel('Price')
plt.ylabel('Rating')
plt.title('Bar Chart: Price vs. Rating')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()